// <auto-generated />
using System;
using Librarian.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Librarian.Migrations
{
    [DbContext(typeof(LibrarianContext))]
    partial class LibrarianContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Librarian.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("AuthorId");

                    b.ToTable("Author");

                    b.HasData(
                        new { AuthorId = 1, Name = "Isaac Asimov" },
                        new { AuthorId = 2, Name = "Neil DeGrasse Tyson" }
                    );
                });

            modelBuilder.Entity("Librarian.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<string>("ISBN");

                    b.Property<int>("PublisherId");

                    b.Property<string>("Title");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Book");

                    b.HasData(
                        new { BookId = 1, AuthorId = 2, ISBN = "IBS-1024-691", PublisherId = 1, Title = "Physics for people in the hurry" },
                        new { BookId = 2, AuthorId = 1, ISBN = "IBS-512-1324", PublisherId = 2, Title = "Autonomous Mind" }
                    );
                });

            modelBuilder.Entity("Librarian.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("PublisherId");

                    b.ToTable("Publisher");

                    b.HasData(
                        new { PublisherId = 1, Name = "BigEarth Publishing Company" },
                        new { PublisherId = 2, Name = "(HOS) High Octane Society" }
                    );
                });

            modelBuilder.Entity("Librarian.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<DateTime>("RentalDate");

                    b.Property<DateTime?>("ReturnDate");

                    b.Property<int>("UserId");

                    b.HasKey("RentalId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Rental");

                    b.HasData(
                        new { RentalId = 1, BookId = 1, RentalDate = new DateTime(2018, 11, 10, 16, 39, 53, 651, DateTimeKind.Local), UserId = 2 },
                        new { RentalId = 2, BookId = 2, RentalDate = new DateTime(2018, 11, 10, 16, 39, 53, 653, DateTimeKind.Local), UserId = 1 }
                    );
                });

            modelBuilder.Entity("Librarian.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new { UserId = 1, Address = "Midgar Garden 24b", Email = "john.slavinsky@yahoo.com", FirstName = "John", LastName = "Slavinsky" },
                        new { UserId = 2, Address = "Madison Square 255 3b", Email = "amanda55@yahoo.com", FirstName = "Amanda", LastName = "Stevens", PhoneNumber = "555-234-523" }
                    );
                });

            modelBuilder.Entity("Librarian.Models.Book", b =>
                {
                    b.HasOne("Librarian.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Librarian.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Librarian.Models.Rental", b =>
                {
                    b.HasOne("Librarian.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Librarian.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
